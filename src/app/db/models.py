# src/app/db/models.py
import enum
from datetime import datetime
from sqlalchemy import (Column, Integer, String, Float, Date, JSON, Enum, 
                        ForeignKey, DateTime, func, Boolean)
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class InvoicePurchaseOrderAssociation(Base):
    __tablename__ = 'invoice_po_association'
    invoice_id = Column(Integer, ForeignKey('invoices.id'), primary_key=True)
    po_id = Column(Integer, ForeignKey('purchase_orders.id'), primary_key=True)

class InvoiceGRNAssociation(Base):
    __tablename__ = 'invoice_grn_association'
    invoice_id = Column(Integer, ForeignKey('invoices.id'), primary_key=True)
    grn_id = Column(Integer, ForeignKey('goods_receipt_notes.id'), primary_key=True)

class DocumentStatus(str, enum.Enum):
    ingested = "ingested"
    matching = "matching"
    needs_review = "needs_review"
    pending_vendor_response = "pending_vendor_response"
    pending_internal_response = "pending_internal_response"
    matched = "matched"
    pending_payment = "pending_payment"
    paid = "paid"
    rejected = "rejected"

class Job(Base):
    __tablename__ = "jobs"
    id = Column(Integer, primary_key=True, index=True)
    status = Column(String, default="processing")
    created_at = Column(DateTime, default=datetime.utcnow)
    completed_at = Column(DateTime, nullable=True)
    total_files = Column(Integer, default=0)
    processed_files = Column(Integer, default=0)
    summary = Column(JSON, nullable=True)

class AuditLog(Base):
    __tablename__ = "audit_logs"
    id = Column(Integer, primary_key=True, index=True)
    timestamp = Column(DateTime, default=datetime.utcnow)
    user = Column(String, default="System") # To track user or system actions
    entity_type = Column(String, index=True) 
    entity_id = Column(String, index=True)   
    action = Column(String) 
    summary = Column(String, nullable=True) # Human-readable summary for beautiful UI
    details = Column(JSON, nullable=True)
    invoice_db_id = Column(Integer, ForeignKey("invoices.id"), nullable=True, index=True)
    invoice = relationship("Invoice", back_populates="audit_logs")

class VendorSetting(Base):
    __tablename__ = "vendor_settings"
    id = Column(Integer, primary_key=True, index=True)
    vendor_name = Column(String, unique=True, index=True, nullable=False)
    price_tolerance_percent = Column(Float, nullable=True)
    contact_email = Column(String, nullable=True) # For communication tool
    bank_details = Column(JSON, nullable=True) # For payment proposals

class LearnedHeuristic(Base):
    """
    Stores patterns learned from user actions, like consistently approving
    a certain type of exception for a specific vendor.
    """
    __tablename__ = "learned_heuristics"
    id = Column(Integer, primary_key=True, index=True)
    vendor_name = Column(String, index=True, nullable=False)
    exception_type = Column(String, index=True, nullable=False)
    
    # Stores the specific conditions of the learned rule
    # e.g., {"max_variance_percent": 10.0} for a PriceMismatch
    learned_condition = Column(JSON, nullable=False)
    
    # The action the user took that we are learning from
    resolution_action = Column(String, nullable=False) 
    
    # How many times this pattern has been confirmed by a user
    trigger_count = Column(Integer, default=1)
    
    # A score from 0.0 to 1.0 indicating how confident the system is in this rule
    confidence_score = Column(Float, default=0.1)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    last_applied_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Notification(Base):
    """
    Stores proactive alerts and suggestions generated by the system's
    monitoring service for user review.
    """
    __tablename__ = "notifications"
    id = Column(Integer, primary_key=True, index=True)
    
    # e.g., 'Optimization', 'Risk', 'AutomationSuggestion'
    type = Column(String, index=True, nullable=False)
    
    # The alert message to be displayed to the user
    message = Column(String, nullable=False)
    
    # Link to the relevant entity, e.g., an Invoice ID or Vendor Name
    related_entity_id = Column(String, nullable=True) 
    related_entity_type = Column(String, nullable=True)
    
    # For suggestions that can be actioned
    proposed_action = Column(JSON, nullable=True)
    
    is_read = Column(Integer, default=0) # 0 for unread, 1 for read
    created_at = Column(DateTime, default=datetime.utcnow)

class AutomationRule(Base):
    __tablename__ = "automation_rules"
    id = Column(Integer, primary_key=True, index=True)
    rule_name = Column(String, nullable=False)
    # To track if a rule was created automatically or by a user.
    source = Column(String, default="user") # 'user' or 'suggested'
    vendor_name = Column(String, index=True, nullable=True)
    conditions = Column(JSON, nullable=False) # e.g., {"field": "grand_total", "operator": "<", "value": 500}
    action = Column(String, nullable=False) # e.g., "approve"
    is_active = Column(Integer, default=1)

class PurchaseOrder(Base):
    __tablename__ = "purchase_orders"
    id = Column(Integer, primary_key=True, index=True)
    po_number = Column(String, unique=True, index=True, nullable=False)
    vendor_name = Column(String)
    buyer_name = Column(String)
    order_date = Column(Date, nullable=True)
    line_items = Column(JSON, nullable=True) # This is already here
    # --- FIX START ---
    # Store the complete data payload used for PDF generation
    raw_data_payload = Column(JSON, nullable=True)
    # --- FIX END ---
    file_path = Column(String, nullable=True)
    grns = relationship("GoodsReceiptNote", back_populates="po")
    
    # ADD THIS LINE:
    invoices = relationship("Invoice", secondary="invoice_po_association", back_populates="purchase_orders")
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class GoodsReceiptNote(Base):
    __tablename__ = "goods_receipt_notes"
    id = Column(Integer, primary_key=True, index=True)
    grn_number = Column(String, unique=True, index=True, nullable=False)
    po_number = Column(String, ForeignKey("purchase_orders.po_number"), nullable=True)
    received_date = Column(Date, nullable=True)
    line_items = Column(JSON, nullable=True)
    file_path = Column(String, nullable=True) # For linking to the original PDF
    po = relationship("PurchaseOrder", back_populates="grns")
    
    # MODIFY THIS LINE:
    # from: invoices = relationship("Invoice", back_populates="grn")
    # to:
    invoices = relationship("Invoice", secondary="invoice_grn_association", back_populates="grns")

    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Invoice(Base):
    __tablename__ = "invoices"
    id = Column(Integer, primary_key=True, index=True)
    invoice_id = Column(String, unique=True, index=True, nullable=False)
    vendor_name = Column(String)
    buyer_name = Column(String)
    
    # ADD THIS NEW FIELD for line-item level PO numbers:
    # This stores an array of PO numbers found on the invoice for easy lookup
    # without needing to join tables every time.
    related_po_numbers = Column(JSON, nullable=True)
    
    invoice_date = Column(Date, nullable=True)
    due_date = Column(Date, nullable=True)
    subtotal = Column(Float, nullable=True)
    tax = Column(Float, nullable=True)
    grand_total = Column(Float, nullable=True)
    line_items = Column(JSON, nullable=True)
    
    # --- MODIFIED FIELD ---
    # Renamed from exception_details to reflect its new purpose.
    # It will now store a complete, step-by-step trace of the matching process.
    match_trace = Column(JSON, nullable=True)
    # --- END MODIFICATION ---
    
    status = Column(Enum(DocumentStatus), default=DocumentStatus.ingested, nullable=False)
    
    review_category = Column(String, nullable=True) # e.g., 'data_mismatch', 'missing_document', 'policy_violation'
    
    ai_recommendation = Column(JSON, nullable=True)
    file_path = Column(String, nullable=True)
    
    # ADD THIS NEW FIELD for user notes:
    notes = Column(String, nullable=True)
    
    # NEW FIELD for Non-PO invoices:
    gl_code = Column(String, nullable=True)

    # New fields for financial KPIs
    discount_terms = Column(String, nullable=True)
    discount_amount = Column(Float, nullable=True)
    discount_due_date = Column(Date, nullable=True)
    paid_date = Column(Date, nullable=True)
    
    # --- ADD THIS NEW COLUMN ---
    payment_batch_id = Column(String, index=True, nullable=True)
    
    # Timestamps for KPI calculation
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Link to the processing job
    job_id = Column(Integer, ForeignKey("jobs.id"), nullable=True)
    job = relationship("Job")

    # ADD THESE NEW RELATIONSHIPS:
    purchase_orders = relationship("PurchaseOrder", secondary="invoice_po_association", back_populates="invoices")
    grns = relationship("GoodsReceiptNote", secondary="invoice_grn_association", back_populates="invoices")
    comments = relationship("Comment", back_populates="invoice", cascade="all, delete-orphan")
    audit_logs = relationship("AuditLog", back_populates="invoice", cascade="all, delete-orphan")

class Comment(Base):
    __tablename__ = "comments"
    id = Column(Integer, primary_key=True, index=True)
    invoice_id = Column(Integer, ForeignKey("invoices.id"), nullable=False)
    user = Column(String, default="System") # Should be linked to a User model in a real app
    text = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    # Add a type field for distinguishing communications
    type = Column(String, default="internal") # 'internal', 'vendor', 'internal_review'
    invoice = relationship("Invoice", back_populates="comments") 